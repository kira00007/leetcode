#include <bits/stdc++.h>
using namespace std;

struct Set {
	vector<int> link;
	vector<int> sz;
	Set(int n)
		: link(vector<int>(n,0)), sz(vector<int>(n,0))
	{
		for(int i = 0; i < n; i++) {
			link[i] = i;
			sz[i] = 1;
		}
	}
	int find(int u) {
		while(link[u] != u) u = link[u];
		return u;
	}
	void join(int u, int v) {
		u = find(u);
		v = find(v);
		if(sz[u] < sz[v])
			swap(u,v);
		sz[u] += sz[v];
		link[v] = u;
	}
};

class Solution {
public:
	int manhattan_distance(vector<int> &point1, vector<int> &point2) {
		return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1]);
	}
    int minCostConnectPoints(vector<vector<int>>& points) {
		const int N = (int) points.size();
		priority_queue<vector<int>> edges;
		for(int i = 0; i < N-1; i++) for(int j = i + 1; j < N; j++) {
			if(i == j) continue;
			edges.push({-manhattan_distance(points[i], points[j]), i, j});
		}
		int ans = 0;
		Set s(N);
        int total_edge = 0;
		while(!edges.empty()) {
			vector<int> t = edges.top();
			edges.pop();
			if(s.find(t[1]) != s.find(t[2])) {
				s.join(t[1], t[2]);
				ans -= t[0];
                total_edge++;
			}
            if(total_edge == N-1) break;
		}
		return ans;
    }
};

int main() {
	// vector<vector<int>> points = {
	// 	{3,12},
	// 	{-2,5},
	// 	{-4,1}
	// };
	// vector<vector<int>> points = { {-1000000,-1000000},{1000000,1000000} };
	// vector<vector<int>> points = { {0,0} };
	// vector<vector<int>> points = { {0,0},{1,1},{1,0},{-1,1} };
	// vector<vector<int>> points = { {0,0},{2,2},{3,10},{5,2},{7,0} };
	vector<vector<int>> points = { 
		{3734,898},
		{-4934,-6748},
		{-3921,7263},
		{-7887,7917},
		{-914,-394},
		{7943,-7171},
		{-3966,7699},
		{-7882,-4154},
		{8988,4923},
		{1673,-6697},
		{-150,-860},
		{3026,-8088},
		{-3367,-4189},
		{-5929,7578},
		{8057,3383},
		{6752,-383},
		{-868,3859},
		{1719,-7055},
		{9777,4650},
		{-8317,2903},
		{3246,-2106},
		{-1183,-8995},
		{8736,5771},
		{496,8741},
		{-8271,-7458},
		{-5753,-867},
		{-1447,7554},
		{1712,-5493},
		{4427,2919},
		{-7856,5076},
		{3912,-666},
		{2538,-7701},
		{6365,-1875},
		{-5160,9904},
		{-8259,6375},
		{4968,-7006},
		{-3706,5806},
		{115,-6320},
		{-8409,-2726},
		{9611,-4483},
		{593,-7030},
		{6583,7881},
		{-3990,9766},
		{7761,-7010},
		{8153,-9615},
		{-7981,750},
		{1071,-6103},
		{9001,-2386},
		{7758,-7479},
		{-3200,3006},
		{-572,1629},
		{2448,1274},
		{-3345,8205},
		{3005,-5561},
		{9558,6173},
		{-7071,7976},
		{4210,1086},
		{1690,-8518},
		{-8703,4775},
		{4663,8310},
		{-9687,5482},
		{-1526,1519},
		{9973,-2162},
		{7370,2966},
		{-1646,-8266},
		{885,-1122},
		{-4183,-6252},
		{-3877,1433},
		{7417,-4615},
		{-5325,-3606},
		{331,-4898},
		{9912,7818},
		{6694,-9358},
		{-6144,-7542},
		{-431,3223},
		{9203,-1842},
		{481,-5904},
		{-853,-5847},
		{3974,8486},
		{7578,-1906},
		{-7419,-9293},
		{8873,-1856},
		{-2874,-8692},
		{-5114,739},
		{-2892,46},
		{-4076,3686},
		{3837,-3327},
		{-5371,-2296},
		{-1981,2507},
		{7135,-7212},
		{-3507,6717},
		{-1201,3368},
		{-9779,-5528},
		{-9022,5844},
		{-9273,5896},
		{5565,-322},
		{2157,7874},
		{-2221,4524},
		{-7553,-7617},
		{-1047,6653},
		{-1279,58},
		{4111,5851},
		{7710,1457},
		{-8358,-8221},
		{-9280,5745},
		{5762,9531},
		{-2199,6253},
		{-3813,3872},
		{6084,-8672},
		{8829,5108},
		{-8879,-3169},
		{1358,2847},
		{-8321,-4040},
		{6564,-9100},
		{-2698,-6282},
		{3092,1711},
		{4937,-8524},
		{-4131,-196},
		{1596,-9022},
		{7458,5845},
		{-6729,-8317},
		{-4423,7010},
		{6446,-140},
		{-4031,214},
		{-8460,3101},
		{9347,-3933},
		{8493,2871},
		{-3492,-5998},
		{5043,6399},
		{-910,-2614},
		{3172,6518},
		{-6530,-2069},
		{-3334,6707},
		{9780,-8155},
		{9932,-2937},
		{-7872,-5364},
		{-5442,-6440},
		{-1441,-3733},
		{5268,1831},
		{8887,-4712},
		{5878,9309},
		{7232,9820},
		{-1106,-5342},
		{-2145,-137},
		{-3496,-9783},
		{130,1538},
		{6425,-4463},
		{-3036,-6736},
		{4798,1704},
		{-7197,7415},
		{8013,-7999},
		{-3836,2084},
		{1454,9994},
		{8113,-9782},
		{2122,4338},
		{6061,-2800},
		{2775,-1438},
		{4993,-8635},
		{-2477,7201},
		{7718,-5636},
		{-3066,-2726},
		{-2836,-1679},
		{-5558,-4432},
		{1930,729},
		{-8525,-3149},
		{-1066,-7059},
		{-7969,-3478},
		{405,5172},
		{4368,789},
		{3254,8128},
		{-2003,-8944},
		{7695,-778},
		{-9722,6848},
		{-9701,-1618},
		{2864,-1893},
		{2627,-3680},
		{-5184,-7353},
		{1543,4983},
		{5896,-8105},
		{7106,8416},
		{-6878,-2122},
		{4445,-2827},
		{8739,-6904},
		{-1243,-7556},
		{-2098,-5771},
		{6956,7120},
		{3106,-9953},
		{-8725,2757},
		{-4707,100},
		{-8657,9923},
		{-3788,2686},
		{-8951,-2519},
		{-6319,3611},
		{-1232,-9700},
		{532,2424},
		{2872,-9785},
		{-5870,8691},
		{-4203,-9533},
		{1931,8574},
		{1357,3836},
		{8628,-1433},
		{-920,6344},
		{-6126,-1559},
		{-192,3800},
		{5061,8649},
		{-7026,-7453},
		{-2442,2867},
		{4108,-5861},
		{6776,8771},
		{9305,3993},
		{-783,-5789},
		{-8722,6629},
		{-9779,-9334},
		{-2720,-8169},
		{-5229,-7762},
		{-7924,-9895},
		{9524,400},
		{7466,-8245},
		{-6927,-3076},
		{3161,4748},
		{-8114,1090},
		{-731,7980},
		{-4449,-1135},
		{-5043,1603},
		{8612,-165},
		{-8597,4842},
		{-4985,1919},
		{3037,-4392},
		{-5670,8954},
		{3814,7480},
		{7046,4442},
		{-7492,-5716},
		{-750,2543},
		{8944,-2033},
		{-2540,6327},
		{1906,-4819},
		{6524,4474},
		{9718,1805},
		{8833,3797},
		{-1035,-7440},
		{-1832,-436},
		{-4720,1059},
		{3977,-7607},
		{-6965,-9612},
		{3884,-1769},
		{-1987,-9262},
		{134,4774},
		{-1975,1094},
		{6638,-7665},
		{4463,-8290},
		{-3374,9493},
		{-734,7002},
		{3779,971},
		{1199,-7209},
		{-3105,5272},
		{5049,9626},
		{3584,-2910},
		{7658,-6792},
		{-1925,1161},
		{652,-6451},
		{-432,9717},
		{-8182,-2291},
		{3883,-3446},
		{758,-3254},
		{-6059,8074},
		{9895,-1974},
		{8411,-6075},
		{-5798,7223},
	 };
	int ans = Solution().minCostConnectPoints(points);
	cout << ans << '\n';
	return 0;
}